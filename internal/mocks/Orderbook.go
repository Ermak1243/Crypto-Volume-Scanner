// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "main/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Orderbook is an autogenerated mock type for the Orderbook type
type Orderbook struct {
	mock.Mock
}

// Asks provides a mock function with given fields: pair
func (_m *Orderbook) Asks(pair string) map[string]interface{} {
	ret := _m.Called(pair)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(pair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Bids provides a mock function with given fields: pair
func (_m *Orderbook) Bids(pair string) map[string]interface{} {
	ret := _m.Called(pair)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(pair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// SearchVolume provides a mock function with given fields: pair, exchange, search
func (_m *Orderbook) SearchVolume(pair string, exchange string, search float64) []models.FoundVolume {
	ret := _m.Called(pair, exchange, search)

	var r0 []models.FoundVolume
	if rf, ok := ret.Get(0).(func(string, string, float64) []models.FoundVolume); ok {
		r0 = rf(pair, exchange, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FoundVolume)
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: pair, asks, bids
func (_m *Orderbook) Upsert(pair string, asks [][]interface{}, bids [][]interface{}) {
	_m.Called(pair, asks, bids)
}

type mockConstructorTestingTNewOrderbook interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderbook creates a new instance of Orderbook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderbook(t mockConstructorTestingTNewOrderbook) *Orderbook {
	mock := &Orderbook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

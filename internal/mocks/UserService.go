// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cmap "github.com/orcaman/concurrent-map/v2"

	mock "github.com/stretchr/testify/mock"

	models "cvs/internal/models"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *UserService) DeleteUser(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserIdFromMemory provides a mock function with given fields: userID
func (_m *UserService) DeleteUserIdFromMemory(userID int) {
	_m.Called(userID)
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserService) GetUserByEmail(ctx context.Context, email string) (models.User, error) {
	ret := _m.Called(ctx, email)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, userID
func (_m *UserService) GetUserById(ctx context.Context, userID int) (models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersIdFromDB provides a mock function with given fields: ctx
func (_m *UserService) GetUsersIdFromDB(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUsersIdFromMemory provides a mock function with given fields:
func (_m *UserService) GetUsersIdFromMemory() cmap.ConcurrentMap[string, string] {
	ret := _m.Called()

	var r0 cmap.ConcurrentMap[string, string]
	if rf, ok := ret.Get(0).(func() cmap.ConcurrentMap[string, string]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cmap.ConcurrentMap[string, string])
	}

	return r0
}

// InsertUser provides a mock function with given fields: ctx, user
func (_m *UserService) InsertUser(ctx context.Context, user models.User) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (int, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserIdIntoMemory provides a mock function with given fields: userID
func (_m *UserService) SetUserIdIntoMemory(userID int) {
	_m.Called(userID)
}

// UpdatePassword provides a mock function with given fields: ctx, user
func (_m *UserService) UpdatePassword(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRefreshToken provides a mock function with given fields: c, user
func (_m *UserService) UpdateRefreshToken(c context.Context, user models.User) error {
	ret := _m.Called(c, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// JwtService is an autogenerated mock type for the JwtService type
type JwtService struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: userId, sessionId
func (_m *JwtService) CreateAccessToken(userId int, sessionId int) (string, int64, error) {
	ret := _m.Called(userId, sessionId)

	var r0 string
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) (string, int64, error)); ok {
		return rf(userId, sessionId)
	}
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(userId, sessionId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(userId, sessionId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(userId, sessionId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateRefreshToken provides a mock function with given fields: userId, sessionId
func (_m *JwtService) CreateRefreshToken(userId int, sessionId int) (string, error) {
	ret := _m.Called(userId, sessionId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (string, error)); ok {
		return rf(userId, sessionId)
	}
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(userId, sessionId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parse provides a mock function with given fields: token
func (_m *JwtService) Parse(token string) (int, int, error) {
	ret := _m.Called(token)

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int, int, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewJwtService interface {
	mock.TestingT
	Cleanup(func())
}

// NewJwtService creates a new instance of JwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJwtService(t mockConstructorTestingTNewJwtService) *JwtService {
	mock := &JwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
